syntax = "proto3";

option csharp_namespace = "RPG.Protos";

package RPG.Protos;

// ========================
// MENSAGENS DE AUTENTICAÇÃO
// ========================

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
}

message CreatePlayerRequest {
  string email = 1;
  string player_name = 2;
  string vocation_name = 3;
}

message CreatePlayerResponse {
  bool success = 1;
  string message = 2;
}

// ========================
// MENSAGENS DE STATUS DO JOGADOR
// ========================

message GetPlayerStatusRequest {
  string email = 1;
}

message GetPlayerStatusResponse {
  bool success = 1;
  string message = 2;
  string player_name = 3;
  string vocation_name = 4;
  int32 level = 5;
  int32 current_hp = 6;
  int32 max_hp = 7;
  int32 total_attack = 8;
  int32 total_defense = 9;
  int32 experience = 10;
  int32 coins = 11;
  repeated string inventory = 12;
}

// ========================
// MENSAGENS DE BATALHA
// ========================

message StartBattleRequest {
  string email = 1;
}

message StartBattleResponse {
  bool success = 1;
  string message = 2;
  int32 monster_count = 3;
  string battle_result = 4;
  bool victory = 5;
  int32 exp_gained = 6;
  int32 coins_gained = 7;
  repeated string items_looted = 8;
}

// ========================
// MENSAGENS DE PROGRESSO
// ========================

message SaveProgressRequest {
  string email = 1;
}

message SaveProgressResponse {
  bool success = 1;
  string message = 2;
}

// ========================
// MENSAGENS DE STATUS ONLINE E MULTIPLAYER
// ========================

message OnlinePlayer {
  string player_name = 1;
  string vocation_name = 2;
  int32 level = 3;
  string status = 4; // "online", "in_battle", "idle"
  int64 last_seen = 5; // timestamp
  int32 x = 6; // posição X do jogador
  int32 y = 7; // posição Y do jogador
  string email = 8; // email do jogador
}

message GetOnlinePlayersRequest {
  // Não precisa de campos, busca todos
}

message GetOnlinePlayersResponse {
  bool success = 1;
  string message = 2;
  repeated OnlinePlayer players = 3;
  int32 total_online = 4;
}

message UpdatePlayerStatusRequest {
  string email = 1;
  string status = 2; // "online", "in_battle", "idle", "offline"
  int32 x = 3; // posição X do jogador
  int32 y = 4; // posição Y do jogador
}

message UpdatePlayerStatusResponse {
  bool success = 1;
  string message = 2;
}

message SendMessageRequest {
  string from_email = 1;
  string to_player_name = 2;
  string message = 3;
}

message SendMessageResponse {
  bool success = 1;
  string message = 2;
}

message GetMessagesRequest {
  string email = 1;
}

message ChatMessage {
  string from_player = 1;
  string message = 2;
  int64 timestamp = 3;
}

message GetMessagesResponse {
  bool success = 1;
  string message = 2;
  repeated ChatMessage messages = 3;
}

message ServerStatusRequest {
  // Não precisa de campos
}

message ServerStatusResponse {
  bool server_online = 1;
  string server_version = 2;
  int32 total_players = 3;
  int32 players_online = 4;
  int32 players_in_battle = 5;
  string uptime = 6;
}

// ========================
// SERVIÇO PRINCIPAL
// ========================

service GameService {
  // Autenticação
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc CreatePlayer (CreatePlayerRequest) returns (CreatePlayerResponse);
  
  // Status do jogador
  rpc GetPlayerStatus (GetPlayerStatusRequest) returns (GetPlayerStatusResponse);
  
  // Gameplay
  rpc StartBattle (StartBattleRequest) returns (StartBattleResponse);
  
  // Progresso
  rpc SaveProgress (SaveProgressRequest) returns (SaveProgressResponse);
  
  // Multiplayer e Status Online
  rpc GetOnlinePlayers (GetOnlinePlayersRequest) returns (GetOnlinePlayersResponse);
  rpc UpdatePlayerStatus (UpdatePlayerStatusRequest) returns (UpdatePlayerStatusResponse);
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc GetMessages (GetMessagesRequest) returns (GetMessagesResponse);
  rpc GetServerStatus (ServerStatusRequest) returns (ServerStatusResponse);
}
